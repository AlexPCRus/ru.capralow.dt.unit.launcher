// @unit-test
Процедура ПроверитьИстинуНаИстину(Фреймворк) Экспорт
	Фреймворк.ПроверитьИстину(Истина, "Проверить истину на Истина");
КонецПроцедуры
 
// @unit-test
Процедура ПроверитьИстинуНаЛожь(Фреймворк) Экспорт
	Фреймворк.ПроверитьИстину(Ложь, "Проверить истину на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЛожьНаИстину(Фреймворк) Экспорт
	Фреймворк.ПроверитьЛожь(Ложь, "Проверить ложь на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЛожьНаЛожь(Фреймворк) Экспорт
	Фреймворк.ПроверитьЛожь(Истина, "Проверить ложь на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеДатыВПериодНаИстину(Фреймворк) Экспорт
	ЭталонныйПериод = Новый СтандартныйПериод(Дата(2019, 1, 1), Дата(2019, 12, 31));
	ПроверяемаяДата = Дата(2019, 7, 1);
	
	// FIXME: Эталонный параметр должен быть слева
	Фреймворк.ПроверитьДату(ЭталонныйПериод, ПроверяемаяДата, "Проверить дату на вхождение в период на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеДатыВПериодНаЛожь(Фреймворк) Экспорт
	ЭталонныйПериод = Новый СтандартныйПериод(Дата(2019, 1, 1), Дата(2019, 12, 31));
	ПроверяемаяДата = Дата(2018, 7, 1);
	
	// FIXME: Эталонный параметр должен быть слева
	Фреймворк.ПроверитьДату(ЭталонныйПериод, ПроверяемаяДата, "Проверить дату на вхождение в период на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоДатСТочностью2СекундыНаИстину(Фреймворк) Экспорт
	ЭталоннаяДата	= Дата(2019, 7, 1, 0, 0, 1);
	ПроверяемаяДата	= Дата(2019, 7, 1, 0, 0, 3);
	
	// FIXME: Эталонный параметр должен быть слева
	Фреймворк.ПроверитьРавенствоДатСТочностью2Секунды(ЭталоннаяДата, ПроверяемаяДата, "Проверить дату совпадение с датой с точностью 2 секунды на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоДатСТочностью2СекундыНаЛожь(Фреймворк) Экспорт
	ЭталоннаяДата	= Дата(2019, 7, 1, 0, 0, 1);
	ПроверяемаяДата	= Дата(2019, 7, 1, 0, 0, 4);
	
	// FIXME: Эталонный параметр должен быть слева
	Фреймворк.ПроверитьРавенствоДатСТочностью2Секунды(ЭталоннаяДата, ПроверяемаяДата, "Проверить дату совпадение с датой с точностью 2 секунды на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоСтрокиНаИстину(Фреймворк) Экспорт
	ЭталоннаяСтрока		= "Эталон";
	ПроверяемаяСтрока	= "Эталон";
	
	Фреймворк.ПроверитьРавенство(ЭталоннаяСтрока, ПроверяемаяСтрока, "Проверить равенство строк на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоСтрокиНаЛожь(Фреймворк) Экспорт
	ЭталоннаяСтрока		= "Эталон";
	ПроверяемаяСтрока	= "Результат";
	
	Фреймворк.ПроверитьРавенство(ЭталоннаяСтрока, ПроверяемаяСтрока, "Проверить равенство строк на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеРавенствоСтрокиНаИстину(Фреймворк) Экспорт
	ЭталоннаяСтрока		= "Эталон";
	ПроверяемаяСтрока	= "Результат";
	
	Фреймворк.ПроверитьНеРавенство(ЭталоннаяСтрока, ПроверяемаяСтрока, "Проверить неравенство строк на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеРавенствоСтрокиНаЛожь(Фреймворк) Экспорт
	ЭталоннаяСтрока		= "Эталон";
	ПроверяемаяСтрока	= "Эталон";
	
	Фреймворк.ПроверитьНеРавенство(ЭталоннаяСтрока, ПроверяемаяСтрока, "Проверить неравенство строк на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоЧислаНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьРавенство(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить равенство чисел на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоЧислаНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 2;
	
	Фреймворк.ПроверитьРавенство(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить равенство чисел на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеРавенствоЧислаНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 2;
	
	Фреймворк.ПроверитьНеРавенство(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить неравенство чисел на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеРавенствоЧислаНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьНеРавенство(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить неравенство чисел на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоБольшеНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло		= 2;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьБольше(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить число больше на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоБольшеНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьБольше(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить число больше на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоБольшеИлиРавноНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьБольшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить число больше или равно на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоБольшеИлиРавноНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 2;
	
	Фреймворк.ПроверитьБольшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить число больше или равно на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоМеньшеНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 2;
	
	Фреймворк.ПроверитьМеньше(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить число меньше на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоМеньшеНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьМеньше(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить число меньше на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоМеньшеИлиРавноНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло		= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьМеньшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить число меньше или равно на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоМеньшеИлиРавноНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло		= 2;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьМеньшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло, "Проверить число меньше или равно на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВыполнилосьНаИстину(Фреймворк) Экспорт
	Алгоритм			= "ПроверитьИстину(Истина, ""Проверить истину на Истина"")";
	
	Фреймворк.ПроверитьВыполнилось(Алгоритм, Неопределено, "Проверить метод Выполнить на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВыполнилосьНаЛожь(Фреймворк) Экспорт
	Алгоритм			= "ПроверитьИстину(Ложь, ""Проверить истину на Ложь"")";
	
	Фреймворк.ПроверитьВыполнилось(Алгоритм, Неопределено, "Проверить метод Выполнить на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьМетодВыполнилсяНаИстина(Фреймворк) Экспорт
	Объект		= Фреймворк.Объект();
	ИмяМетода	= "ПроверитьИстину";
	Параметры	= Новый Массив;
	Параметры.Добавить("Истина");
	
	// FIXME: Падает, а не должен
	Фреймворк.ПроверитьМетодВыполнился(Объект, ИмяМетода, Параметры, "Проверить выполнение метода объекта на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьМетодВыполнилсяНаЛожь(Фреймворк) Экспорт
	Объект		= Фреймворк.Объект();
	ИмяМетода	= "ПроверитьИстину";
	Параметры	= Новый Массив;
	Параметры.Добавить("Ложь");
	
	// FIXME: Падает, но не пишет почему
	Фреймворк.ПроверитьМетодВыполнился(Объект, ИмяМетода, Параметры, "Проверить выполнение метода объекта на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеВыполнилосьНаИстину(Фреймворк) Экспорт
	Алгоритм			= "ПроверитьЛожь(Истина, ""Проверить ложь на Ложь"")";
	
	Фреймворк.ПроверитьНеВыполнилось(Алгоритм, Неопределено, "Проверить метод Выполнить с ошибкой на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеВыполнилосьНаЛожь(Фреймворк) Экспорт
	Алгоритм			= "ПроверитьЛожь(Ложь, ""Проверить истину на Ложь"")";
	
	Фреймворк.ПроверитьНеВыполнилось(Алгоритм, Неопределено, "Проверить метод Выполнить с ошибкой на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьМетодНеВыполнилсяНаИстина(Фреймворк) Экспорт
	Объект		= Фреймворк.Объект();
	ИмяМетода	= "ПроверитьЛожь";
	Параметры	= Новый Массив;
	Параметры.Добавить("Истина");
	
	Фреймворк.ПроверитьНеМетодВыполнился(Объект, ИмяМетода, Параметры, "Проверить невыполнение метода объекта на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьМетодНеВыполнилсяНаЛожь(Фреймворк) Экспорт
	Объект		= Фреймворк.Объект();
	ИмяМетода	= "ПроверитьЛожь";
	Параметры	= Новый Массив;
	Параметры.Добавить("Ложь");
	
	Фреймворк.ПроверитьНеМетодВыполнился(Объект, ИмяМетода, Параметры, "Проверить невыполнение метода объекта на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЗаполненностьНаИстина(Фреймворк) Экспорт
	Фреймворк.ПроверитьЗаполненность("Заполнено", "Проверить заполненность на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЗаполненностьНаЛожь(Фреймворк) Экспорт
	Фреймворк.ПроверитьЗаполненность("", "Проверить заполненность на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеЗаполненностьНаИстина(Фреймворк) Экспорт
	Фреймворк.ПроверитьНеЗаполненность("", "Проверить незаполненность на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеЗаполненностьНаЛожь(Фреймворк) Экспорт
	Фреймворк.ПроверитьНеЗаполненность("Заполнено", "Проверить незаполненность на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьТипНаИстина(Фреймворк) Экспорт
	ЭталонныйТип	= Тип("УправляемаяФорма");
	ПроверяемыйТип	= Тип("УправляемаяФорма");
	
	Фреймворк.ПроверитьТип(ЭталонныйТип, ПроверяемыйТип, "Проверить совпадение типов на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьТипНаЛожь(Фреймворк) Экспорт
	ЭталонныйТип	= Тип("УправляемаяФорма");
	ПроверяемыйТип	= Тип("Форма");
	
	Фреймворк.ПроверитьТип(ЭталонныйТип, ПроверяемыйТип, "Проверить совпадение типов на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеСтрокиНаИстина(Фреймворк) Экспорт
	ПолнаяСтрока	= "ФреймворкТестирования";
	ПодстрокаПоиска	= "Тест";
	
	Фреймворк.ПроверитьВхождение(ПолнаяСтрока, ПодстрокаПоиска, "Проверить вхождение подстроки в строку на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеСтрокиНаЛожь(Фреймворк) Экспорт
	ПолнаяСтрока	= "ФреймворкТестирования";
	ПодстрокаПоиска	= "Релиз";
	
	Фреймворк.ПроверитьВхождение(ПолнаяСтрока, ПодстрокаПоиска, "Проверить вхождение подстроки в строку на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеЭлементаКоллекцииНаИстина(Фреймворк) Экспорт
	ЭлементКоллекции = Новый Структура("Строка1", "Значение1");

	Коллекция	= Новый Массив;
	Коллекция.Добавить(ЭлементКоллекции);
	
	Фреймворк.ПроверитьВхождениеВКоллекцию(Коллекция, ЭлементКоллекции, "Проверить вхождение элемента коллекции в коллекцию на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеЭлементаКоллекцииНаЛожь(Фреймворк) Экспорт
	ЭлементКоллекции = Новый Структура("Строка1", "Значение1");

	Коллекция	= Новый Массив;
	Коллекция.Добавить(Новый Структура("Строка2", "Значение2"));
	
	Фреймворк.ПроверитьВхождениеВКоллекцию(Коллекция, ЭлементКоллекции, "Проверить вхождение элемента коллекции в коллекцию на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоКоллекцийНаИстина(Фреймворк) Экспорт
	ЭлементКоллекции = Новый Структура("Строка1", "Значение1");

	ЭталоннаяКоллекция	= Новый Массив;
	ЭталоннаяКоллекция.Добавить(ЭлементКоллекции);

	ПроверяемаяКоллекция	= Новый Массив;
	ПроверяемаяКоллекция.Добавить(ЭлементКоллекции);
	
	Фреймворк.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ЭталоннаяКоллекция, ПроверяемаяКоллекция, "Проверить равенство коллекций на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоКоллекцийНаЛожь(Фреймворк) Экспорт
	ЭталоннаяКоллекция	= Новый Массив;
	ЭталоннаяКоллекция.Добавить(Новый Структура("Строка1", "Значение1"));

	ПроверяемаяКоллекция	= Новый Массив;
	ПроверяемаяКоллекция.Добавить(Новый Структура("Строка2", "Значение2"));
	
	Фреймворк.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ЭталоннаяКоллекция, ПроверяемаяКоллекция, "Проверить равенство коллекций на Ложь");
КонецПроцедуры

