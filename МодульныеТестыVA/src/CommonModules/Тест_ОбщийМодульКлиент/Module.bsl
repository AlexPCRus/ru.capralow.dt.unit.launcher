// @unit-test
Процедура ПроверитьИстинуНаИстину(Фреймворк) Экспорт
	Фреймворк.ПроверитьИстину(Истина, "Проверить истину на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьИстинуНаЛожь(Фреймворк) Экспорт
	// FIXME: В Expected и Actual написано false/false, а надо Истина/Ложь
	Фреймворк.ПроверитьИстину(Ложь, "Проверить истину на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЛожьНаИстину(Фреймворк) Экспорт
	Фреймворк.ПроверитьЛожь(Ложь, "Проверить ложь на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЛожьНаЛожь(Фреймворк) Экспорт
	// FIXME: В Expected и Actual написано false/true, а надо Ложь/Истина
	Фреймворк.ПроверитьЛожь(Истина, "Проверить ложь на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеДатыВПериодНаИстину(Фреймворк) Экспорт
	ЭталонныйПериод = Новый СтандартныйПериод(Дата(2019, 1, 1), Дата(2019, 12, 31));
	ПроверяемаяДата = Дата(2019, 7, 1);
	
	Фреймворк.ПроверитьДату(ЭталонныйПериод, ПроверяемаяДата,
		"Проверить дату на вхождение в период на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеДатыВПериодНаЛожь(Фреймворк) Экспорт
	ЭталонныйПериод = Новый СтандартныйПериод(Дата(2019, 1, 1), Дата(2019, 12, 31));
	ПроверяемаяДата = Дата(2018, 7, 1);
	
	Фреймворк.ПроверитьДату(ЭталонныйПериод, ПроверяемаяДата,
		"Проверить дату на вхождение в период на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоДатСТочностью2СекундыНаИстину(Фреймворк) Экспорт
	ЭталоннаяДата	= Дата(2019, 7, 1, 0, 0, 1);
	ПроверяемаяДата	= Дата(2019, 7, 1, 0, 0, 3);
	
	Фреймворк.ПроверитьРавенствоДатСТочностью2Секунды(ЭталоннаяДата, ПроверяемаяДата,
		"Проверить дату совпадение с датой с точностью 2 секунды на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоДатСТочностью2СекундыНаЛожь(Фреймворк) Экспорт
	ЭталоннаяДата	= Дата(2019, 7, 1, 0, 0, 1);
	ПроверяемаяДата	= Дата(2019, 7, 1, 0, 0, 4);
	
	// FIXME: В Actual нужно выводить диапазон
	Фреймворк.ПроверитьРавенствоДатСТочностью2Секунды(ЭталоннаяДата, ПроверяемаяДата,
		"Проверить дату совпадение с датой с точностью 2 секунды на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоСтрокиНаИстину(Фреймворк) Экспорт
	ЭталоннаяСтрока		= "Эталон";
	ПроверяемаяСтрока	= "Эталон";
	
	Фреймворк.ПроверитьРавенство(ЭталоннаяСтрока, ПроверяемаяСтрока,
		"Проверить равенство строк на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоСтрокиНаЛожь(Фреймворк) Экспорт
	ЭталоннаяСтрока		= "Эталон";
	ПроверяемаяСтрока	= "Результат";
	
	Фреймворк.ПроверитьРавенство(ЭталоннаяСтрока, ПроверяемаяСтрока,
		"Проверить равенство строк на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеРавенствоСтрокиНаИстину(Фреймворк) Экспорт
	ЭталоннаяСтрока		= "Эталон";
	ПроверяемаяСтрока	= "Результат";
	
	Фреймворк.ПроверитьНеРавенство(ЭталоннаяСтрока, ПроверяемаяСтрока,
		"Проверить неравенство строк на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеРавенствоСтрокиНаЛожь(Фреймворк) Экспорт
	ЭталоннаяСтрока		= "Эталон";
	ПроверяемаяСтрока	= "Эталон";
	
	Фреймворк.ПроверитьНеРавенство(ЭталоннаяСтрока, ПроверяемаяСтрока,
		"Проверить неравенство строк на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоЧислаНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло	= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьРавенство(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить равенство чисел на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьРавенствоЧислаНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло	= 1;
	ПроверяемоеЧисло	= 2;
	
	Фреймворк.ПроверитьРавенство(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить равенство чисел на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеРавенствоЧислаНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло	= 1;
	ПроверяемоеЧисло	= 2;
	
	Фреймворк.ПроверитьНеРавенство(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить неравенство чисел на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеРавенствоЧислаНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло	= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьНеРавенство(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить неравенство чисел на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоБольшеНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло	= 1;
	ПроверяемоеЧисло	= 2;
	
	Фреймворк.ПроверитьБольше(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить число больше на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоБольшеНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло	= 1;
	ПроверяемоеЧисло	= 0;
	
	// FIXME: Эталонный параметр должен быть слева в описании ошибки
	Фреймворк.ПроверитьБольше(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить число больше на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоБольшеИлиРавноНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло	= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьБольшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить число больше или равно на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоБольшеИлиРавноНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло	= 2;
	ПроверяемоеЧисло	= 1;
	
	// FIXME: Эталонный параметр должен быть слева в описании ошибки
	Фреймворк.ПроверитьБольшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить число больше или равно на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоМеньшеНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло	= 2;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьМеньше(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить число меньше на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоМеньшеНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло	= 0;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьМеньше(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить число меньше на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоМеньшеИлиРавноНаИстину(Фреймворк) Экспорт
	ЭталонноеЧисло	= 1;
	ПроверяемоеЧисло	= 1;
	
	Фреймворк.ПроверитьМеньшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить число меньше или равно на Истину");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЧислоМеньшеИлиРавноНаЛожь(Фреймворк) Экспорт
	ЭталонноеЧисло	= 1;
	ПроверяемоеЧисло	= 2;
	
	// FIXME: Эталонный параметр должен быть слева в описании ошибки
	Фреймворк.ПроверитьМеньшеИлиРавно(ЭталонноеЧисло, ПроверяемоеЧисло,
		"Проверить число меньше или равно на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВыполнилосьНаИстину(Фреймворк) Экспорт
	Алгоритм		= "ПроверитьИстину(Истина, ""Проверить истину на Истина"")";
	
	Фреймворк.ПроверитьВыполнилось(Алгоритм, Неопределено,
		"Проверить метод Выполнить на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВыполнилосьНаЛожь(Фреймворк) Экспорт
	Алгоритм		= "ПроверитьИстину(Ложь, ""Проверить истину на Ложь"")";
	
	// FIXME: В Expected/Actual должно быть Истина/Ложь
	Фреймворк.ПроверитьВыполнилось(Алгоритм, Неопределено,
		"Проверить метод Выполнить на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьМетодВыполнилсяНаИстина(Фреймворк) Экспорт
	ИмяМетода	= "ПроверитьИстину";
	Параметры	= Новый Массив;
	Параметры.Добавить("Истина");
	
	Фреймворк.ПроверитьМетодВыполнился(Фреймворк, ИмяМетода, Параметры,
		"Проверить выполнение метода объекта на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьМетодВыполнилсяНаЛожь(Фреймворк) Экспорт
	ИмяМетода	= "ПроверитьИстину";
	Параметры	= Новый Массив;
	Параметры.Добавить("Ложь");
	
	// FIXME: В Expected/Actual должно быть Ложь/Истина
	Фреймворк.ПроверитьМетодВыполнился(Фреймворк, ИмяМетода, Параметры,
		"Проверить выполнение метода объекта на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеВыполнилосьНаИстину(Фреймворк) Экспорт
	Алгоритм		= "ПроверитьЛожь(Истина, ""Проверить истину на Ложь"")";
	
	// FIXME: Проверка упала, а не должна
	Фреймворк.ПроверитьНеВыполнилось(Алгоритм, Неопределено,
		"Проверить метод Выполнить с ошибкой на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеВыполнилосьНаЛожь(Фреймворк) Экспорт
	Алгоритм		= "ПроверитьЛожь(Ложь, ""Проверить ложь на Ложь"")";
	
	// FIXME: В Expected/Actual должно быть Ложь/Истина
	Фреймворк.ПроверитьНеВыполнилось(Алгоритм, Неопределено,
		"Проверить метод Выполнить с ошибкой на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьМетодНеВыполнилсяНаИстина(Фреймворк) Экспорт
	ИмяМетода	= "ПроверитьЛожь";
	Параметры	= Новый Массив;
	Параметры.Добавить("Истина");
	
	// FIXME: Проверка упала, а не должна
	Фреймворк.ПроверитьМетодНеВыполнился(Фреймворк, ИмяМетода, Параметры,
		"Проверить невыполнение метода объекта на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьМетодНеВыполнилсяНаЛожь(Фреймворк) Экспорт
	ИмяМетода	= "ПроверитьЛожь";
	Параметры	= Новый Массив;
	Параметры.Добавить("Ложь");
	
	// FIXME: В Expected/Actual должно быть Ложь/Истина
	Фреймворк.ПроверитьМетодНеВыполнился(Фреймворк, ИмяМетода, Параметры,
		"Проверить невыполнение метода объекта на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЗаполненностьНаИстина(Фреймворк) Экспорт
	Фреймворк.ПроверитьЗаполненность("Заполнено",
		"Проверить заполненность на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЗаполненностьНаЛожь(Фреймворк) Экспорт
	Фреймворк.ПроверитьЗаполненность("",
		"Проверить заполненность на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеЗаполненностьНаИстина(Фреймворк) Экспорт
	Фреймворк.ПроверитьНеЗаполненность("",
		"Проверить незаполненность на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьНеЗаполненностьНаЛожь(Фреймворк) Экспорт
	Фреймворк.ПроверитьНеЗаполненность("Заполнено",
		"Проверить незаполненность на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЗначениеНаТипНаИстина(Фреймворк) Экспорт
	ЭталонноеЗначение	= "Строка";
	ПроверяемыйТип		= Тип("Строка");
	
	Фреймворк.ПроверитьТип(ЭталонноеЗначение, ПроверяемыйТип,
		"Проверить совпадение типов на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьЗначениеНаТипНаЛожь(Фреймворк) Экспорт
	ЭталонноеЗначение	= "Строка";
	ПроверяемыйТип		= Тип("Число");
	
	Фреймворк.ПроверитьТип(ЭталонноеЗначение, ПроверяемыйТип,
		"Проверить совпадение типов на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеСтрокиНаИстина(Фреймворк) Экспорт
	ПолнаяСтрока		= "ФреймворкТестирования";
	ПодстрокаПоиска	= "Тест";
	
	Фреймворк.ПроверитьВхождение(ПолнаяСтрока, ПодстрокаПоиска,
		"Проверить вхождение подстроки в строку на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеСтрокиНаЛожь(Фреймворк) Экспорт
	ПолнаяСтрока		= "ФреймворкТестирования";
	ПодстрокаПоиска	= "Релиз";
	
	Фреймворк.ПроверитьВхождение(ПолнаяСтрока, ПодстрокаПоиска,
		"Проверить вхождение подстроки в строку на Ложь");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеЭлементаКоллекцииНаИстина(Фреймворк) Экспорт
	ЭлементКоллекции = Новый Структура("Строка1", "Значение1");

	Коллекция	= Новый Массив;
	Коллекция.Добавить(ЭлементКоллекции);
	
	// FIXME: Коллекция должна быть первым параметром
	Фреймворк.ПроверитьВхождениеВКоллекцию(Коллекция, ЭлементКоллекции,
		"Проверить вхождение элемента коллекции в коллекцию на Истина");
КонецПроцедуры

// @unit-test
Процедура ПроверитьВхождениеЭлементаКоллекцииНаЛожь(Фреймворк) Экспорт
	ЭлементКоллекции = Новый Структура("Строка1", "Значение1");

	Коллекция	= Новый Массив;
	Коллекция.Добавить(Новый Структура("Строка2", "Значение2"));
	
	// FIXME: Коллекция должна быть первым параметром
	Фреймворк.ПроверитьВхождениеВКоллекцию(Коллекция, ЭлементКоллекции,
		"Проверить вхождение элемента коллекции в коллекцию на Ложь");
КонецПроцедуры

// @unit-test:table
Процедура ПроверитьРавенствоКоллекцийНаИстина(Фреймворк) Экспорт
	// Убрать ТолстыйКлиентОбычноеПриложение для серверного и клиент-серверного модулей
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
	ЭталоннаяКоллекция	= Новый ТаблицаЗначений;
	ЭталоннаяКоллекция.Колонки.Добавить("Колонка1");
	ЭталоннаяКоллекция.Колонки.Добавить("Колонка2");
	ЭталоннаяКоллекция.Колонки.Добавить("Колонка3");
	Стр = ЭталоннаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение1";
	Стр.Колонка2 = "Значение2";
	Стр.Колонка3 = "Значение3";
	Стр = ЭталоннаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение4";
	Стр.Колонка2 = "Значение5";
	Стр.Колонка3 = "Значение6";
	Стр = ЭталоннаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение7";
	Стр.Колонка2 = "Значение8";
	Стр.Колонка3 = "Значение9";

	ПроверяемаяКоллекция	= Новый ТаблицаЗначений;
	ПроверяемаяКоллекция.Колонки.Добавить("Колонка1");
	ПроверяемаяКоллекция.Колонки.Добавить("Колонка2");
	ПроверяемаяКоллекция.Колонки.Добавить("Колонка3");
	Стр = ПроверяемаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение1";
	Стр.Колонка2 = "Значение2";
	Стр.Колонка3 = "Значение3";
	Стр = ПроверяемаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение4";
	Стр.Колонка2 = "Значение5";
	Стр.Колонка3 = "Значение6";
	Стр = ПроверяемаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение7";
	Стр.Колонка2 = "Значение8";
	Стр.Колонка3 = "Значение9";

	#Иначе
	ЭталоннаяКоллекция	= Новый Массив;
	ЭталоннаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение1, Значение2, Значение3"));
	ЭталоннаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение4, Значение5, Значение6"));
	ЭталоннаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение7, Значение8, Значение9"));

	ПроверяемаяКоллекция	= Новый Массив;
	ПроверяемаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение1, Значение2, Значение3"));
	ПроверяемаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение4, Значение5, Значение6"));
	ПроверяемаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение7, Значение8, Значение9"));

	#КонецЕсли
	
	// FIXME: Нужен метод ПроверитьКоллекции, а этот метод вызывасть из него, если типы подходящие
	Фреймворк.ПроверитьРавенствоТаблиц(ЭталоннаяКоллекция, ПроверяемаяКоллекция,
		"Проверить равенство коллекций на Истина", Неопределено);
КонецПроцедуры

// @unit-test:table
Процедура ПроверитьРавенствоКоллекцийНаЛожь(Фреймворк) Экспорт
	// Убрать ТолстыйКлиентОбычноеПриложение для серверного и клиент-серверного модулей
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
	ЭталоннаяКоллекция	= Новый ТаблицаЗначений;
	ЭталоннаяКоллекция.Колонки.Добавить("Колонка1");
	ЭталоннаяКоллекция.Колонки.Добавить("Колонка2");
	ЭталоннаяКоллекция.Колонки.Добавить("Колонка3");
	Стр = ЭталоннаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение1";
	Стр.Колонка2 = "Значение2";
	Стр.Колонка3 = "Значение3";
	Стр = ЭталоннаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение4";
	Стр.Колонка2 = "Значение5";
	Стр.Колонка3 = "Значение6";
	Стр = ЭталоннаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение7";
	Стр.Колонка2 = "Значение8";
	Стр.Колонка3 = "Значение9";

	ПроверяемаяКоллекция	= Новый ТаблицаЗначений;
	ПроверяемаяКоллекция.Колонки.Добавить("Колонка1");
	ПроверяемаяКоллекция.Колонки.Добавить("Колонка2");
	ПроверяемаяКоллекция.Колонки.Добавить("Колонка3");
	Стр = ПроверяемаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение2";
	Стр.Колонка2 = "Значение3";
	Стр.Колонка3 = "Значение4";
	Стр = ПроверяемаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение5";
	Стр.Колонка2 = "Значение6";
	Стр.Колонка3 = "Значение7";
	Стр = ПроверяемаяКоллекция.Добавить();
	Стр.Колонка1 = "Значение8";
	Стр.Колонка2 = "Значение9";
	Стр.Колонка3 = "Значение0";

	#Иначе
	ЭталоннаяКоллекция	= Новый Массив;
	ЭталоннаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение1, Значение2, Значение3"));
	ЭталоннаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение4, Значение5, Значение6"));
	ЭталоннаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение7, Значение8, Значение9"));

	ПроверяемаяКоллекция	= Новый Массив;
	ПроверяемаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение2, Значение3, Значение4"));
	ПроверяемаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение5, Значение6, Значение7"));
	ПроверяемаяКоллекция.Добавить(Новый Структура("Колонка1, Колонка2, Колонка3", "Значение8, Значение9, Значение0"));

	#КонецЕсли
	
	// FIXME: Нужен метод ПроверитьКоллекции, а этот метод вызывасть из него, если типы подходящие
	Фреймворк.ПроверитьРавенствоТаблиц(ЭталоннаяКоллекция, ПроверяемаяКоллекция,
		"Проверить равенство коллекций на Ложь", Неопределено);
КонецПроцедуры
