package ru.capralow.dt.unit.launcher.plugin.internal.ui.junit;

import org.eclipse.core.resources.IProject;
import org.eclipse.emf.common.util.URI;
import org.eclipse.jdt.junit.model.ITestCaseElement;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.text.TextSelection;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;

import com._1c.g5.v8.dt.bm.index.emf.IBmEmfIndexManager;
import com._1c.g5.v8.dt.bm.index.emf.IBmEmfIndexProvider;
import com._1c.g5.v8.dt.bsl.model.Method;
import com._1c.g5.v8.dt.core.platform.IResourceLookup;
import com._1c.g5.v8.dt.core.platform.IV8Project;
import com._1c.g5.v8.dt.core.platform.IV8ProjectManager;
import com._1c.g5.v8.dt.metadata.mdclass.CommonModule;
import com._1c.g5.v8.dt.ui.util.OpenHelper;

import ru.capralow.dt.unit.launcher.plugin.core.MdUtils;

public class OpenTestCaseAction extends Action {

	private IBmEmfIndexManager bmEmfIndexManager;
	private IV8ProjectManager projectManager;
	private IResourceLookup resourceLookup;

	public OpenTestCaseAction(IBmEmfIndexManager bmEmfIndexManager, IResourceLookup resourceLookup,
			IV8ProjectManager projectManager) {
		this.bmEmfIndexManager = bmEmfIndexManager;
		this.resourceLookup = resourceLookup;
		this.projectManager = projectManager;
	}

	public void run(ITestCaseElement testCase) {
		String projectAndModuleName = testCase.getTestClassName();
		int moduleNameIndex = projectAndModuleName.lastIndexOf('.');

		String projectName = projectAndModuleName.substring(0, moduleNameIndex);
		String moduleName = projectAndModuleName.substring(moduleNameIndex + 1);
		String methodName = testCase.getTestMethodName();

		IV8Project v8Project = projectManager.getProject(projectName);
		if (v8Project == null)
			return;
		IProject project = v8Project.getProject();
		IBmEmfIndexProvider bmEmfIndexProvider = bmEmfIndexManager.getEmfIndexProvider(project);

		CommonModule testCommonModule = (CommonModule) MdUtils.getConfigurationObject("ОбщийМодуль." + moduleName, //$NON-NLS-1$
				bmEmfIndexProvider);
		if (testCommonModule == null)
			return;

		Method testMethod = null;
		for (Method method : testCommonModule.getModule().allMethods()) {
			if (method.getName().equalsIgnoreCase(methodName)) {
				testMethod = method;
				break;
			}
		}
		if (testMethod == null)
			return;

		URI uri = resourceLookup.getPlatformResourceUri(testCommonModule);

		ICompositeNode testNode = NodeModelUtils.findActualNodeFor(testMethod);

		TextSelection selection = new TextSelection(testNode.getOffset(), 0);

		OpenHelper openHelper = new OpenHelper();
		openHelper.openEditor(uri, selection);
	}

}
