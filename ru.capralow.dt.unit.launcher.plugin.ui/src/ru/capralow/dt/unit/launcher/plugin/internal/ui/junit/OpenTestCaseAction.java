package ru.capralow.dt.unit.launcher.plugin.internal.ui.junit;

import java.util.Iterator;

import org.eclipse.core.resources.IProject;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.jdt.junit.model.ITestCaseElement;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.text.TextSelection;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.resource.IEObjectDescription;

import com._1c.g5.v8.dt.bm.index.emf.IBmEmfIndexManager;
import com._1c.g5.v8.dt.bm.index.emf.IBmEmfIndexProvider;
import com._1c.g5.v8.dt.bsl.model.Method;
import com._1c.g5.v8.dt.core.platform.IResourceLookup;
import com._1c.g5.v8.dt.core.platform.IV8Project;
import com._1c.g5.v8.dt.core.platform.IV8ProjectManager;
import com._1c.g5.v8.dt.metadata.mdclass.CommonModule;
import com._1c.g5.v8.dt.metadata.mdclass.MdClassPackage;
import com._1c.g5.v8.dt.metadata.mdclass.MdObject;
import com._1c.g5.v8.dt.ui.util.OpenHelper;

public class OpenTestCaseAction extends Action {

	private static MdObject getConfigurationObject(String objectFullName, IBmEmfIndexProvider bmEmfIndexProvider) {
		EClass mdLiteral = getMdLiteral(objectFullName);
		QualifiedName qnObjectName = getConfigurationObjectQualifiedName(objectFullName, mdLiteral);

		MdObject object = null;

		Iterable<IEObjectDescription> objectIndex = bmEmfIndexProvider
				.getEObjectIndexByType(mdLiteral, qnObjectName, true);
		Iterator<IEObjectDescription> objectItr = objectIndex.iterator();
		if (objectItr.hasNext())
			object = (MdObject) objectItr.next().getEObjectOrProxy();

		if (object == null)
			return null;

		return object;
	}

	private static QualifiedName getConfigurationObjectQualifiedName(String objectFullName, EClass mdLiteral) {
		String[] objectArray = objectFullName.substring(objectFullName.indexOf('.') + 1).split("[.]"); //$NON-NLS-1$

		QualifiedName qnObjectName = null;
		for (String objectValue : objectArray) {
			if (qnObjectName == null)
				qnObjectName = QualifiedName.create(mdLiteral.getName(), objectValue);

			else {
				if (mdLiteral.equals(MdClassPackage.Literals.SUBSYSTEM))
					qnObjectName = qnObjectName.append(QualifiedName.create(mdLiteral.getName(), objectValue));

				else
					qnObjectName = qnObjectName.append(QualifiedName.create(objectValue));

			}

		}

		return qnObjectName;
	}

	private static EClass getMdLiteral(String objectFullName) {
		EClass mdLiteral = MdClassPackage.Literals.CONFIGURATION;

		String objectType = objectFullName.substring(0, objectFullName.indexOf('.'));

		if (objectType.equals("Подсистема")) //$NON-NLS-1$
			mdLiteral = MdClassPackage.Literals.SUBSYSTEM;

		else if (objectType.equals("ОбщийМодуль")) //$NON-NLS-1$
			mdLiteral = MdClassPackage.Literals.COMMON_MODULE;

		else if (objectType.equals("Справочник")) //$NON-NLS-1$
			mdLiteral = MdClassPackage.Literals.CATALOG;

		else if (objectType.equals("Документ")) //$NON-NLS-1$
			mdLiteral = MdClassPackage.Literals.DOCUMENT;

		else if (objectType.equals("Перечисление")) //$NON-NLS-1$
			mdLiteral = MdClassPackage.Literals.ENUM;

		else if (objectType.equals("ПланВидовХарактеристик")) //$NON-NLS-1$
			mdLiteral = MdClassPackage.Literals.CHART_OF_CHARACTERISTIC_TYPES;

		else if (objectType.equals("ПланВидовРасчета")) //$NON-NLS-1$
			mdLiteral = MdClassPackage.Literals.CHART_OF_CALCULATION_TYPES;

		else if (objectType.equals("РегистрСведений")) //$NON-NLS-1$
			mdLiteral = MdClassPackage.Literals.INFORMATION_REGISTER;

		return mdLiteral;
	}

	private IBmEmfIndexManager bmEmfIndexManager;
	private IV8ProjectManager projectManager;
	private IResourceLookup resourceLookup;

	public OpenTestCaseAction(IBmEmfIndexManager bmEmfIndexManager, IResourceLookup resourceLookup,
			IV8ProjectManager projectManager) {
		this.bmEmfIndexManager = bmEmfIndexManager;
		this.resourceLookup = resourceLookup;
		this.projectManager = projectManager;
	}

	public void run(ITestCaseElement testCase) {
		String projectAndModuleName = testCase.getTestClassName();
		int moduleNameIndex = projectAndModuleName.lastIndexOf('.');

		String projectName = projectAndModuleName.substring(0, moduleNameIndex);
		String moduleName = projectAndModuleName.substring(moduleNameIndex + 1);
		String methodName = testCase.getTestMethodName();

		IV8Project v8Project = projectManager.getProject(projectName);
		if (v8Project == null)
			return;
		IProject project = v8Project.getProject();
		IBmEmfIndexProvider bmEmfIndexProvider = bmEmfIndexManager.getEmfIndexProvider(project);

		CommonModule testCommonModule = (CommonModule) getConfigurationObject("ОбщийМодуль." + moduleName, //$NON-NLS-1$
				bmEmfIndexProvider);
		if (testCommonModule == null)
			return;

		Method testMethod = null;
		for (Method method : testCommonModule.getModule().allMethods()) {
			if (method.getName().equalsIgnoreCase(methodName)) {
				testMethod = method;
				break;
			}
		}
		if (testMethod == null)
			return;

		URI uri = resourceLookup.getPlatformResourceUri(testCommonModule);

		ICompositeNode testNode = NodeModelUtils.findActualNodeFor(testMethod);

		TextSelection selection = new TextSelection(testNode.getOffset(), 0);

		OpenHelper openHelper = new OpenHelper();
		openHelper.openEditor(uri, selection);
	}

}
